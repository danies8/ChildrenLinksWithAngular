import { Component, OnInit, ViewChild, ElementRef, AfterViewInit, OnDestroy, ViewChildren } from '@angular/core';
import { NgForm, FormGroup } from '@angular/forms';
import { Link, LinkResolved } from '../link';
import { LinkService } from '../link.service';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription, Observable, fromEvent, merge } from 'rxjs';
import { FormBuilder,  FormControl, FormArray, Validators, FormControlName } from '@angular/forms';
import { GenericValidator } from 'src/app/shared/generic-validator';
import { debounceTime } from 'rxjs/operators';
import { ValidateUrl } from 'src/app/shared/url.validator';
//import { GenericValidator } from '../shared/generic-validator';


@Component({
  selector: 'app-link-edit',
  templateUrl: './link-edit.component.html',
  styleUrls: ['./link-edit.component.css']
})
export class LinkEditComponent implements OnInit, AfterViewInit, OnDestroy {
  @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];
  pageTitle = 'Product Edit';
  errorMessage: string;
  linkForm: FormGroup;

  link: Link;
  private originalLink: Link;
  private sub: Subscription;

  get isDirty(): boolean {
  return this.linkForm.dirty ? true : false;
}

   // Use with the generic validation message class
   displayMessage: { [key: string]: string } = {};
   private validationMessages: { [key: string]: { [key: string]: string } };
   private genericValidator: GenericValidator;
   urlPattern = '(https?://)?([\\da-z.-]+)\\.([a-z.]{2,6})[/\\w .-]*/?';

   constructor(private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private linkService: LinkService) {

    // Defines all of the validation messages for the form.
    // These could instead be retrieved from a file or database.
    this.validationMessages = {
     name: {
        required: 'Link name is required.',
        minlength: 'Link name must be at least three characters.',
      },
      url: {
        required: 'Link url is required.',
       },
      imageUrl: {
        required: 'image url  is required.',
      }
    };

    // Define an instance of the validator for use with this form,
    // passing in this form's set of validation messages.
    this.genericValidator = new GenericValidator(this.validationMessages);
  }
   ngOnInit(): void {

    this.linkForm = this.fb.group({
      name: ['', [Validators.required,Validators.minLength(3)]],
      url: ['', Validators.required],//, Validators.pattern(this.urlPattern)],
      imageUrl: ['', Validators.required]
        });

    // Read the product Id from the route parameter
    this.sub = this.route.data.subscribe(data => {
        const resolvedData: LinkResolved = data['resolvedData'];
        this.errorMessage = resolvedData.error;
        this.displayLink(resolvedData.link);
      });
  }

  ngAfterViewInit(): void {
    // Watch for the blur event from any input element on the form.
    let controlBlurs: Observable<any>[] = this.formInputElements
      .map((formControl: ElementRef) => fromEvent(formControl.nativeElement, 'blur'));

    // Merge the blur event observable with the valueChanges observable
    merge(this.linkForm.valueChanges, ...controlBlurs).pipe(
      debounceTime(800)
    ).subscribe(value => {
      this.displayMessage = this.genericValidator.processMessages(this.linkForm);
    });
  }


  ngOnDestroy(): void {
    this.sub.unsubscribe();
  }

  displayLink(link: Link): void {
    if (this.linkForm) {
      this.linkForm.reset();
    }
    this.link = link;

    if (this.link.id === 0) {
      this.pageTitle = 'Add Product';
    } else {
      this.pageTitle = `Edit Product: ${this.link.name}`;
    }

    // Update the data on the form
    this.linkForm.patchValue({
      name: this.link.name,
      url: this.link.value,
      imageUrl: this.link.imageUrl,
     });
  }


 

onLinkRetrieved(link: Link): void {
    // Reset back to pristine
    this.linkForm.reset();

    // Display the data in the form
    // Use a copy to allow cancel.
    this.originalLink = link;
    console.log("before"+link);
    this.link = Object.assign({}, link);
     if (this.link.id === 0) {
        this.pageTitle = 'Add Link';
    } else {
        this.pageTitle = `Edit Link: ${this.link.name}`;
    }
}

cancel(): void {
    // Navigate back to the product list
    this.router.navigate(['/links'], {queryParamsHandling : 'preserve'});
}

deleteLink(): void {
    if (this.link.id) {
        if (confirm(`Really delete the link: ${this.link.name}?`)) {
            this.linkService.deleteLink(this.link.id)
                .subscribe(
                    () => this.onSaveComplete(),
                    (error: any) => this.errorMessage = <any>error
                );
        }
    } else {
        // Don't delete, it was never saved.
        this.onSaveComplete();
    }
}



saveLink(): void {
    if (this.linkForm.valid) {
      if (this.linkForm.dirty) {
        const p = { ...this.link, ...this.linkForm.value };

        if (p.id === 0) {
          this.linkService.createLink(p)
            .subscribe(
              () => this.onSaveComplete(),
              (error: any) => this.errorMessage = <any>error
            );
        } else {
          this.linkService.updateLink(p)
            .subscribe(
              () => this.onSaveComplete(),
              (error: any) => this.errorMessage = <any>error
            );
        }
      } else {
        this.onSaveComplete();
      }
    } else {
      this.errorMessage = 'Please correct the validation errors.';
    }
  }

onSaveComplete(): void {
    // Reset back to pristine
    this.linkForm.reset(this.linkForm.value);
    // Navigate back to the product list
    this.router.navigate(['/links']);
}

}
